import * as THREE from 'three';

/**
 * Creates an organic leaf geometry with natural curvature
 * 
 * @param {Object} options - Geometry parameters
 * @param {number} options.width - Leaf width
 * @param {number} options.height - Leaf height
 * @param {number} options.segmentsX - Horizontal subdivisions
 * @param {number} options.segmentsY - Vertical subdivisions
 * @param {number} options.ribCurvature - Midrib arch strength (0.0-0.3)
 * @param {number} options.archConcavity - Cross-section scoop depth (0.0-0.3)
 * @param {number} options.tipTwist - Twist at leaf tip in radians (0.0-0.5)
 * @param {number} options.thickness - Optional double-sided thickness (0.0-0.01)
 * @param {number} options.rimCurl - Edge curl amount (0.0-0.3)
 * @returns {THREE.BufferGeometry} Organic leaf geometry
 */
export function createOrganicLeafGeometry({
  width = 1.0,
  height = 1.0,
  segmentsX = 40,
  segmentsY = 18,
  ribCurvature = 0.18,
  archConcavity = 0.22,
  tipTwist = 0.35,
  thickness = 0.007,
  rimCurl = 0.15
}) {
  const geometry = new THREE.PlaneGeometry(width, height, segmentsX, segmentsY);
  const position = geometry.attributes.position;
  
  // Process each vertex to add organic curvature
  for (let i = 0; i < position.count; i++) {
    let x = position.getX(i);
    let y = position.getY(i);
    let z = position.getZ(i);
    
    // Normalize to [0,1] for calculations
    const u = x / width;        // -0.5 to 0.5 range
    const v = (y / height) + 0.5; // 0 to 1 range (stem at 0, tip at 1)
    
    // 1. ARCHED SPINE - Creates the main midrib curve
    // sin((v-0.2)*π) creates arch that peaks around middle
    // (1 - Math.abs(u*2)) makes effect strongest at center, fades to edges
    const archFactor = Math.sin((v - 0.2) * Math.PI);
    const lateralFade = 1.0 - Math.abs(u * 2);
    z += archFactor * ribCurvature * lateralFade;
    
    // 2. CONCAVE SCOOP - Cross-sectional curvature
    // u² creates parabolic scoop from midrib down to edges
    const scoopDepth = archConcavity * (u * u) * 4; // *4 because u is in [-0.5, 0.5]
    z -= scoopDepth;
    
    // 3. RIM CURL - Edges curl upward slightly
    // Stronger at tip (v > 0.6), edges only (high |u|)
    const edgeFactor = Math.abs(u * 2); // 0 at center, 1 at edges
    const tipFactor = Math.max(0, (v - 0.6) * 2.5); // 0 below v=0.6, ramps up
    const curlAmount = rimCurl * edgeFactor * tipFactor;
    z += curlAmount * 0.5; // Subtle upward curl
    
    // 4. TIP TWIST - Rotate geometry near leaf tip
    if (v > 0.5) {
      const twistAmount = tipTwist * ((v - 0.5) * 2); // 0 at v=0.5, full at v=1
      const cosT = Math.cos(twistAmount);
      const sinT = Math.sin(twistAmount);
      
      // Rotate in XZ plane around midrib
      const xNew = x * cosT - z * sinT;
      const zNew = x * sinT + z * cosT;
      x = xNew;
      z = zNew;
    }
    
    // Optional: Add thickness by duplicating and offsetting
    // (Deferred - can be implemented later if needed for shadow quality)
    
    position.setXYZ(i, x, y, z);
  }
  
  // Mark as needing update
  position.needsUpdate = true;
  
  // Compute smooth normals for lighting
  geometry.computeVertexNormals();
  
  // Set dynamic usage for animated vertex attributes
  geometry.attributes.position.setUsage(THREE.DynamicDrawUsage);
  
  return geometry;
}
